// Tao Du
// taodu@csail.mit.edu
// Octo 18, 2015
//
// Calibrate the thrust generated by the propeller.

#include <AP_HAL/AP_HAL.h>
#include <AP_HAL_AVR/AP_HAL_AVR.h>
#include <AP_HAL_SITL/AP_HAL_SITL.h>
#include <AP_HAL_PX4/AP_HAL_PX4.h>
#include <AP_HAL_Linux/AP_HAL_Linux.h>
#include <AP_HAL_Empty/AP_HAL_Empty.h>
#include <AP_Common/AP_Common.h>
#include <AP_Baro/AP_Baro.h>
#include <AP_ADC/AP_ADC.h>
#include <AP_GPS/AP_GPS.h>
#include <AP_InertialSensor/AP_InertialSensor.h>
#include <AP_Notify/AP_Notify.h>
#include <DataFlash/DataFlash.h>
#include <GCS_MAVLink/GCS_MAVLink.h>
#include <AP_Mission/AP_Mission.h>
#include <StorageManager/StorageManager.h>
#include <AP_Terrain/AP_Terrain.h>
#include <AP_Compass/AP_Compass.h>
#include <AP_Declination/AP_Declination.h>
#include <SITL/SITL.h>
#include <Filter/Filter.h>
#include <AP_Param/AP_Param.h>
#include <AP_Progmem/AP_Progmem.h>
#include <AP_Math/AP_Math.h>
#include <AP_AHRS/AP_AHRS.h>
#include <AP_Airspeed/AP_Airspeed.h>
#include <AP_Vehicle/AP_Vehicle.h>
#include <AP_ADC_AnalogSource/AP_ADC_AnalogSource.h>
#include <AP_NavEKF/AP_NavEKF.h>
#include <AP_Rally/AP_Rally.h>
#include <AP_BattMonitor/AP_BattMonitor.h>
#include <AP_RangeFinder/AP_RangeFinder.h>

const AP_HAL::HAL& hal = AP_HAL_BOARD_DRIVER;

const int prop_num = 4;
const uint16_t pwm_min = 1000;
uint16_t last_value = pwm_min;

void setup(void) {
    hal.console->println_P(PSTR("Propeller Measurement."));

    // For each propeller, initialize with the minimal throttle value.
    for (int i = 0; i < prop_num; ++i) {
        hal.rcout->enable_ch(i);
        hal.rcout->write(i, pwm_min);
    }
}

void loop(void) 
{	
    // Get input signal from channel 3(throttle in mode 2).
    uint16_t v = hal.rcin->read(2);
    // Only output the signal when the difference is greater than threshold
    // to avoid verbose outputs.
    const int threshold = 3;
    if (abs((int)v - (int)last_value) > threshold)
        hal.console->printf("%u\n", v);
    last_value = v;
    // Send out the signal.
    hal.rcout->write(2, v);
    hal.scheduler->delay(5);
}

AP_HAL_MAIN();
